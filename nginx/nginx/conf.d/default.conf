upstream sstest {
    server localhost:8080;
    # having this to keep the localhost port from exhausted.
    # but if using beego as application server, I found that
    # beego's JSON service implementation will always open the
    # new port when performing a service but not reuse the
    # connection even the client asked to.
    # beego's JSON use controller.serveJSON that it implemented,
    # and comparing to that it use http.serveContent from go runtime
    # to service static files, it will not have the problem when processing the JSON
    # 一般来说这不会有什么问题，但如果把这个服务放在nginx的反向代理的后面，
    # 并只用一个ip来配置upstream的话就会有问题，当request量大的时候port非
    # 常容易exhausted，从而导致每秒可处理的服务的能力极度下降，我想了一下，
    # 有几种方法可以解决1）改代码，2）在upstream里多配置ip，3）沿着2的思
    # 路，docker技术在这里会很有用， 4）不使用反向代理。
    # 总的来说，这虽然是个问题，但当in the field这个问题似乎没有那么严重。
    keepalive 500;
}

server {
    listen       9090;
    server_name  sstest;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}

    location /todoapi {
        proxy_pass      http://sstest/;
        proxy_http_version      1.1;
        proxy_set_header    Connection "";
        proxy_set_header    Host $host;
        proxy_set_header    X-Real-IP   $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_redirect      http://sstest   /;
    }
}

